/*
 * This file was generated by the Gradle "init" task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 */

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "org.jetbrains.kotlin.kapt" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.allopen" version "$kotlinVersion"
    id "org.jlleitschuh.gradle.ktlint" version "$ktlintVersion"
    id "io.gitlab.arturbosch.detekt" version "1.11.0-RC1"
    id "org.jetbrains.dokka" version "1.4.10.2"
    id "com.jfrog.bintray" version "1.8.5"

    // Apply the java-library plugin for API and implementation separation.
    id "java-library"
    id "maven-publish"
    id "java"
}

group "no.studentmediene"

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

configurations {
    detekt
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    // Align versions of all Kotlin components
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")

    // Micronaut
    kapt(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    kapt("io.micronaut:micronaut-inject-java")
    kapt("io.micronaut:micronaut-validation")
    kapt("io.micronaut.security:micronaut-security-annotations")
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime:$micronautVersion")
    implementation("javax.annotation:javax.annotation-api")

    // Azure
    implementation("com.azure:azure-storage-queue:$azureStorageQueueVersion")

    // Logging
    runtimeOnly("ch.qos.logback:logback-classic")
    implementation("net.logstash.logback:logstash-logback-encoder:6.4")

    // Jackson
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")

    // Test libraries
    kaptTest(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    kaptTest("io.micronaut:micronaut-inject-java")
    testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("io.mockk:mockk:$mockkVersion")

    // Better assertion methods
    testImplementation("io.strikt:strikt-core:$striktVersion")

    testImplementation("org.testcontainers:testcontainers:$testContainersVersion")
    testImplementation("org.testcontainers:localstack:$testContainersVersion")
    testImplementation("org.testcontainers:junit-jupiter:$testContainersVersion")
}


test.classpath += configurations.developmentOnly

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('11')
}

allOpen {
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '11'
        //Will retain parameter names for Java reflection
        javaParameters = true
        languageVersion = "1.4"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
        javaParameters = true
    }
}

kapt {
    arguments {
        arg("micronaut.processing.incremental", true)
        arg("micronaut.processing.annotations", "no.studentmediene.no.studentmediene.micronautazurequeue.*")
        arg("micronaut.processing.group", "no.studentmediene.no.studentmediene.micronautazurequeue")
        arg("micronaut.processing.module", "no.studentmediene.micronautazurequeue")
    }
}

subprojects {
    apply(plugin = "org.jlleitschuh.gradle.ktlint")

    ktlint {
        debug.set(true)
    }
}

detekt {
    toolVersion = "1.11.0"
    config = files("detekt.yml")
    parallel = false
    debug = false
    ignoreFailures = false

    reports {
        html {
            enabled = true
            destination = file("build/reports/detekt.html")
        }
        txt {
            enabled = true
            destination = file("build/reports/detekt.txt")
        }
    }
}

java {
    withSourcesJar()
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }

    developers {
    }

    scm {
        url vcsUrl
    }
}

publishing {
    publications {
        micronautStorareQueue(MavenPublication) {
            from components.java

            groupId group
            artifactId rootProject.name
            version version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', description)
                root.appendNode('name', rootProject.name)
                root.appendNode('url', vcsUrl)
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = project.findProperty("BINTRAY_USER") ?: System.getenv("BINTRAY_USER")
    key = project.findProperty("BINTRAY_TOKEN") ?: System.getenv("BINTRAY_TOKEN")
    publications = ['micronautStorareQueue']

    dryRun = false
    override = false

    pkg {
        repo = rootProject.name
        name = "${rootProject.name}"
        websiteUrl = vcsUrl
        desc = description
        userOrg = 'studentmediene'
        licenses = ['Apache-2.0']
        publicDownloadNumbers = false
        labels = ["micronaut", "azure", "azurestoragequeue"]
        vcsUrl = "${vcsUrl}.git"

        githubRepo = "studentmediene/${rootProject.name}"
        githubReleaseNotesFile = "README.md"

        version {
            name = project.version
            vcsTag = version
            desc = "Build ${version}"
            released  = new Date()
        }
    }

    publish = true
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
                'micronaut.io.watch.restart':'true',
                'micronaut.io.watch.enabled':'true',
                "micronaut.io.watch.paths":"src/main"
        )
    }
}
